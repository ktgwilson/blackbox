const nodemailer = require('nodemailer');

class NotificationService {
  constructor() {
    this.transporter = null;
    this.initializeTransporter();
  }

  async initializeTransporter() {
    try {
      this.transporter = nodemailer.createTransporter({
        host: process.env.SMTP_HOST || 'smtp.gmail.com',
        port: process.env.SMTP_PORT || 587,
        secure: false,
        auth: {
          user: process.env.SMTP_USER,
          pass: process.env.SMTP_PASS
        }
      });
      
      console.log('Email service initialized');
    } catch (error) {
      console.error('Email service initialization failed:', error);
    }
  }

  async sendEstimateNotification(estimateData, recipientEmail) {
    if (!this.transporter) {
      console.log('Email service not available - estimate notification skipped');
      return false;
    }

    try {
      const mailOptions = {
        from: process.env.SMTP_FROM || 'noreply@blackbox5000x.com',
        to: recipientEmail,
        subject: `New Estimate Generated - ${estimateData.tradeType?.toUpperCase()}`,
        html: this.generateEstimateEmailHTML(estimateData)
      };

      await this.transporter.sendMail(mailOptions);
      return true;
    } catch (error) {
      console.error('Email sending failed:', error);
      return false;
    }
  }

  generateEstimateEmailHTML(estimateData) {
    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center;">
          <h1>BlackBox 5000x Estimate</h1>
          <p>Professional AI-Driven Estimation System</p>
        </div>
        
        <div style="padding: 20px; background: #f8f9fa;">
          <h2 style="color: #333;">Project Details</h2>
          <p><strong>Trade Type:</strong> ${estimateData.tradeType?.toUpperCase() || 'GENERAL'}</p>
          <p><strong>Total Estimate:</strong> $${estimateData.totalCost?.toLocaleString() || '0'}</p>
          <p><strong>Generated:</strong> ${new Date().toLocaleDateString()}</p>
          
          <h3 style="color: #333;">Project Scope</h3>
          <p style="background: white; padding: 15px; border-left: 4px solid #667eea;">
            ${estimateData.scope || 'No scope provided'}
          </p>
          
          ${estimateData.costBreakdown ? `
            <h3 style="color: #333;">Cost Breakdown</h3>
            <table style="width: 100%; border-collapse: collapse; background: white;">
              ${Object.entries(estimateData.costBreakdown).map(([category, amount]) => `
                <tr style="border-bottom: 1px solid #eee;">
                  <td style="padding: 10px; font-weight: bold;">${category}</td>
                  <td style="padding: 10px; text-align: right;">$${amount.toLocaleString()}</td>
                </tr>
              `).join('')}
            </table>
          ` : ''}
          
          ${estimateData.aiInsights?.recommendations ? `
            <h3 style="color: #333;">AI Recommendations</h3>
            <ul style="background: white; padding: 15px; margin: 0;">
              ${estimateData.aiInsights.recommendations.map(rec => `
                <li style="margin-bottom: 8px;">${rec.message}</li>
              `).join('')}
            </ul>
          ` : ''}
        </div>
        
        <div style="background: #333; color: white; padding: 15px; text-align: center;">
          <p>Generated by BlackBox 5000x AI Estimation System</p>
          <p style="font-size: 12px; opacity: 0.8;">This is an automated message. Please do not reply.</p>
        </div>
      </div>
    `;
  }

  async sendProjectAlert(alertType, projectData, recipients) {
    if (!this.transporter || !recipients.length) {
      return false;
    }

    const alertTemplates = {
      deadline_approaching: {
        subject: 'Project Deadline Approaching',
        message: `Project "${projectData.name}" deadline is approaching in ${projectData.daysRemaining} days.`
      },
      cost_overrun: {
        subject: 'Cost Overrun Alert',
        message: `Project "${projectData.name}" is ${projectData.overrunPercentage}% over budget.`
      },
      crew_shortage: {
        subject: 'Crew Shortage Alert',
        message: `Insufficient crew assigned to project "${projectData.name}".`
      }
    };

    const template = alertTemplates[alertType];
    if (!template) return false;

    try {
      const mailOptions = {
        from: process.env.SMTP_FROM || 'alerts@blackbox5000x.com',
        to: recipients.join(','),
        subject: template.subject,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 500px; margin: 0 auto;">
            <div style="background: #dc3545; color: white; padding: 15px; text-align: center;">
              <h2>⚠️ Project Alert</h2>
            </div>
            <div style="padding: 20px; background: #f8f9fa;">
              <p style="font-size: 16px;">${template.message}</p>
              <p><strong>Project Details:</strong></p>
              <ul>
                <li>Name: ${projectData.name}</li>
                <li>Type: ${projectData.tradeType}</li>
                <li>Status: ${projectData.status}</li>
              </ul>
              <p style="margin-top: 20px;">
                <a href="${process.env.APP_URL || 'https://blackbox5000x.com'}" 
                   style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
                  View Project
                </a>
              </p>
            </div>
          </div>
        `
      };

      await this.transporter.sendMail(mailOptions);
      return true;
    } catch (error) {
      console.error('Alert email failed:', error);
      return false;
    }
  }
}

module.exports = new NotificationService();
